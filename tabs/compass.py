import streamlit as st
import pandas as pd
from services.offer_service import load_offers
from services.market_data import load_market_analysis
from components.charts import show_market_trend_chart, plot_skills_tech_chart, pie_rythms_chart
from components.interactive_numeric_display import display_numeric_range_selector
from utils.filters import filter_dataframe_by_market

def show_compass():
    st.header("üß≠ Boussole de l'Analyse du March√©")

    # Chargement des donn√©es
    df_market_analysis = load_market_analysis()
    df_offers = load_offers()

    # V√©rification des colonnes n√©cessaires
    required_columns = [
        "March√©", "Comp√©tences principales", "Comp√©tences secondaires",
        "Technos principales", "Technos secondaires"
    ]
    for col in required_columns:
        if col not in df_offers.columns:
            st.warning(f"‚ö†Ô∏è La colonne {col} est manquante dans les donn√©es.")
            return

    if "March√©" not in df_market_analysis.columns:
        st.warning("‚ö†Ô∏è Aucune analyse de march√© n'est disponible.")
        return

    # Fusionner les march√©s disponibles dans les offres et dans les tendances
    markets_offers = df_offers["March√©"].dropna().unique()
    markets_trends = df_market_analysis["March√©"].dropna().unique()
    markets = sorted(set(markets_offers) | set(markets_trends))

    # S√©lection du march√© via fonction de filtre
    selected_market = filter_dataframe_by_market(df_offers, markets, label="üéØ S√©lectionner un march√©")

    # Affichage de la tendance des march√©s
    st.subheader("üìà Tendance des March√©s")
    if selected_market in df_market_analysis["March√©"].values:
        show_market_trend_chart(df_market_analysis, highlight_market=selected_market, context_id="compass")
    else:
        st.info("‚ÑπÔ∏è Aucune donn√©e de tendance disponible pour ce march√©.")

    # Filtrer les offres selon le march√© s√©lectionn√©
    skills_df = df_offers[df_offers["March√©"] == selected_market]
    first_col, second_col, third_col, fourth_col = st.columns(4)

    with first_col:
        display_numeric_range_selector(skills_df, "TJM", "üí∞ TJM (Taux Journalier Moyen)", unit="‚Ç¨")
    with second_col:
        display_numeric_range_selector(skills_df, "S√©niorit√©", "üéØ S√©niorit√©", unit="ans")
    with third_col:
        st.subheader("üè† Rythme de travail")

        if "Rythme" in skills_df.columns:
            sectors = skills_df["Rythme"].dropna().str.strip()
            if not sectors.empty:
                pie_rythms_chart(sectors, title="R√©partition des rythmes de travail", context_id="compass")
            else:
                st.info("‚ÑπÔ∏è Aucune donn√©e sur le rythme de travail pour ce march√©.")
        else:
            st.warning("‚ö†Ô∏è La colonne 'Rythme' est absente des donn√©es.")
    with fourth_col:
        st.subheader("üè† Secteurs")

        if "Secteur" in skills_df.columns:
            sectors = skills_df["Secteur"].dropna().str.strip()
            if not sectors.empty:
                pie_rythms_chart(sectors, title="Secteurs du march√©", context_id="compass")
            else:
                st.info("‚ÑπÔ∏è Aucune donn√©e sur le secteur de travail pour ce march√©.")
        else:
            st.warning("‚ö†Ô∏è La colonne 'Secteur' est absente des donn√©es.")

    st.subheader("üíº Comp√©tences")

    # Comp√©tences principales
    main_skills = skills_df["Comp√©tences principales"].dropna().str.split(",").explode().str.strip()
    if not main_skills.empty:
        st.markdown("**Comp√©tences principales**")
        plot_skills_tech_chart(main_skills, title="Comp√©tences principales", context_id="compass")
    else:
        st.warning("‚ö†Ô∏è Aucune comp√©tence principale disponible pour ce march√©.")

    # Comp√©tences secondaires
    secondary_skills = skills_df["Comp√©tences secondaires"].dropna().str.split(",").explode().str.strip()
    if not secondary_skills.empty:
        st.markdown("**Comp√©tences secondaires**")
        plot_skills_tech_chart(secondary_skills, title="Comp√©tences secondaires", context_id="compass")
    else:
        st.warning("‚ö†Ô∏è Aucune comp√©tence secondaire disponible pour ce march√©.")

    st.subheader("üíª Technologies")

    # Technologies principales
    main_techs = skills_df["Technos principales"].dropna().str.split(",").explode().str.strip()
    if not main_techs.empty:
        st.markdown("**Technologies principales**")
        plot_skills_tech_chart(main_techs, title="Technologies principales", context_id="compass")
    else:
        st.warning("‚ö†Ô∏è Aucune technologie principale disponible pour ce march√©.")

    # Technologies secondaires
    secondary_techs = skills_df["Technos secondaires"].dropna().str.split(",").explode().str.strip()
    if not secondary_techs.empty:
        st.markdown("**Technologies secondaires**")
        plot_skills_tech_chart(secondary_techs, title="Technologies secondaires", context_id="compass")
    else:
        st.warning("‚ö†Ô∏è Aucune technologie secondaire disponible pour ce march√©.")
