import streamlit as st
import pandas as pd
from services.offer_service import load_offers
from services.market_data import load_market_analysis
from components.charts import show_market_trend_chart, plot_skills_tech_chart

def show_compass():
    st.header("Boussole de l'Analyse du March√©")

    # Charger les donn√©es du march√© et des offres
    df_market_analysis = load_market_analysis()
    df_offers = load_offers()

    # V√©rification des colonnes n√©cessaires dans les donn√©es d'offres
    required_columns = ["March√©", "Comp√©tences principales", "Comp√©tences secondaires", "Technos principales", "Technos secondaires"]
    for col in required_columns:
        if col not in df_offers.columns:
            st.warning(f"‚ö†Ô∏è La colonne {col} est manquante dans les donn√©es.")
            return

    # V√©rification de la pr√©sence de la colonne "March√©" dans l'analyse du march√©
    if "March√©" not in df_market_analysis.columns:
        st.warning("‚ö†Ô∏è Aucune analyse de march√© n'est disponible.")
        return

    # Filtrer les march√©s existants dans le fichier d'analyse de march√©
    markets = sorted(df_market_analysis["March√©"].dropna().unique())

    # S√©lection du march√© (le premier march√© est s√©lectionn√© par d√©faut)
    selected_market = st.selectbox("S√©lectionner un march√©", markets, index=0)

    # Tendance des march√©s (Graphique)
    st.subheader("üìà Tendance des March√©s")
    market_data_for_trend = df_market_analysis[df_market_analysis["March√©"] == selected_market]
    if not market_data_for_trend.empty:
        show_market_trend_chart(market_data_for_trend)
    else:
        st.warning("‚ö†Ô∏è Aucune donn√©e de tendance disponible pour ce march√©.")

    # Comp√©tences principales et secondaires (Diagramme en b√¢ton)
    st.subheader("üíº Comp√©tences principales et secondaires")
    skills_df = df_offers[df_offers["March√©"] == selected_market]
    
    # Traitement des comp√©tences principales et secondaires
    main_skills = skills_df["Comp√©tences principales"].dropna().str.split(",").explode().str.strip()
    secondary_skills = skills_df["Comp√©tences secondaires"].dropna().str.split(",").explode().str.strip()

    # V√©rification si les listes de comp√©tences principales et secondaires sont vides
    if not main_skills.empty:
        st.subheader("Comp√©tences principales")
        plot_skills_tech_chart(main_skills, title="Comp√©tences principales")
    else:
        st.warning("‚ö†Ô∏è Aucune comp√©tence principale disponible pour ce march√©.")

    if not secondary_skills.empty:
        st.subheader("Comp√©tences secondaires")
        plot_skills_tech_chart(secondary_skills, title="Comp√©tences secondaires")
    else:
        st.warning("‚ö†Ô∏è Aucune comp√©tence secondaire disponible pour ce march√©.")

    # Technologies principales et secondaires (Diagramme en b√¢ton)
    st.subheader("üíª Technologies principales et secondaires")
    main_techs = skills_df["Technos principales"].dropna().str.split(",").explode().str.strip()
    secondary_techs = skills_df["Technos secondaires"].dropna().str.split(",").explode().str.strip()

    # V√©rification si les listes de technologies principales et secondaires sont vides
    if not main_techs.empty:
        st.subheader("Technologies principales")
        plot_skills_tech_chart(main_techs, title="Technologies principales")
    else:
        st.warning("‚ö†Ô∏è Aucune technologie principale disponible pour ce march√©.")

    if not secondary_techs.empty:
        st.subheader("Technologies secondaires")
        plot_skills_tech_chart(secondary_techs, title="Technologies secondaires")
    else:
        st.warning("‚ö†Ô∏è Aucune technologie secondaire disponible pour ce march√©.")
